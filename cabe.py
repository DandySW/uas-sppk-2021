# -*- coding: utf-8 -*-
"""SPPK Cabe-cabean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fT__Co01-Hj-YqL2gpTCZR-OAzQ9sXj9

# **1. Memasukkan Data dan Melihat Jumlah Alternatif & Kriteria**
"""

#Import file CSV
import pandas as pd

df = pd.read_csv('cabe.csv')
df

#Mencari jumlah Kolom
count_columns = len(df.columns)
print('jumlah kolom: ' + str(count_columns))

#Mencari jumlah Baris
count_rows = len(df)
print('jumlah baris: ' + str(count_rows))

"""# **2. Matriks Keputusan Ternormalisasi**"""

#Membuang baris Kategori & Bobot dan kolom Alternatif
df2 = df.drop([count_rows-2, count_rows-1])
df2 = df2.drop('Alternatif', axis='columns').astype(int)

#Tiap-tiap bobot dikuadratkan
df2_square = df2**2

#Menjumlahkan kuadrat dari setiap kriteria dan diakar
sqrt = df2_square.sum()**0.5
sqrt

#Menghitung nilai R
df2_norm = df2 / sqrt
df2_norm

"""# **3. Menentukan Matriks Keputusan Ternormalisasi Terbobot**"""

#Menghitung nilai Y
df2_weight = df2_norm * df.iloc[-1,1:count_columns].astype(int)
df2_weight

"""# **4. Menentukan matriks solusi ideal positif & matriks solusi ideal negatif**"""

A_plus_minus = {
    'A_plus'  : [],
    'A_minus' : []
}

for column in range(1, count_columns):

  #Kondisi jika kategori dari kriteria adalah benefit
  if df.iloc[-2,column] == 'benefit':
    A_plus_minus['A_plus'].append(df2_weight.iloc[:,column-1].max())
    A_plus_minus['A_minus'].append(df2_weight.iloc[:,column-1].mmin())

  #Kondisi jika kategori dari kriteria adalah cost  
  else:
    A_plus_minus['A_plus'].append(df2_weight.iloc[:,column-1].min())
    A_plus_minus['A_minus'].append(df2_weight.iloc[:,column-1].max())

print(A_plus_minus['A_plus'])
print(A_plus_minus['A_minus'])

"""# **5. Menentukan Jarak Antara Nilai Setiap Alternatif dengan Matriks Solusi Ideal Positif dan Matriks Solusi Ideal Negatif**"""

#Mencari nilai D+ dan D-
D_plus_minus = {
    'D_plus'  : [],
    'D_minus' : []
}

D_plus_square = (df2_weight - A_plus_minus['A_plus'])**2
D_minus_square = (df2_weight - A_plus_minus['A_minus'])**2

for row in range(count_rows-2):
  D_plus = (D_plus_square.loc[row].sum())**0.5
  D_minus = (D_minus_square.loc[row].sum())**0.5

  D_plus_minus['D_plus'].append(D_plus)
  D_plus_minus['D_minus'].append(D_minus)

print(D_plus_minus['D_plus'])
print(D_plus_minus['D_minus'])

"""# **6. Mencari nilai preferensi untuk setiap alternatif**"""

#Mencari nilai V
total = []
for row in range(count_rows-2):
  v = D_plus_minus['D_minus'][row] / (D_plus_minus['D_minus'][row] + D_plus_minus['D_plus'][row])
  total.append(v)
total

#Memberikan ranking untuk setiap alternatif
df3 = df[['Alternatif']]
df3 = df3.drop([count_rows-2, count_rows-1])
df3.insert(1, 'Total', total)

ranking = df3.iloc[:,1].rank(ascending=False)
df3.insert(2, 'Ranking', ranking)
df3